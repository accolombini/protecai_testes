#!/usr/bin/env python3
"""
SOLU√á√ÉO UNIVERSAL ROBUSTA: PROCESSAMENTO DOS 50 ARQUIVOS REAIS
Sistema ProtecAI - PETROBRAS
Data: 28 de outubro de 2025

CAUSA RAIZ TRATADA: 
- Arquitetura UNIVERSAL que processa QUALQUER formato (PDF, TXT, S40, XLSX, CSV)
- N√£o usa "parsers espec√≠ficos" - usa conversor universal existente
- ROBUSTA e FLEX√çVEL - suporta novos formatos sem modifica√ß√£o
- ELIMINA a necessidade de scripts espec√≠ficos por formato

PRINC√çPIOS: ARQUITETURA UNIVERSAL, ZERO PARSERS ESPEC√çFICOS, CAUSA RAIZ TRATADA
"""

import os
import sys
import logging
import hashlib
from pathlib import Path
from datetime import datetime
import re
import psycopg2
from psycopg2.extras import RealDictCursor
import subprocess

# Adicionar src ao path para imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from universal_format_converter import UniversalFormatConverter

# Configura√ß√£o do logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('universal_relay_processing.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class UniversalRobustRelayProcessor:
    """
    Processador UNIVERSAL que usa a arquitetura flex√≠vel existente
    para processar QUALQUER formato de arquivo de rel√©
    """
    
    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.src_dir = self.base_dir / "src"
        self.inputs_dir = self.base_dir / "inputs"
        self.outputs_csv_dir = self.base_dir / "outputs" / "csv"
        
        # Configura√ß√£o PostgreSQL
        self.db_config = {
            'host': 'localhost',
            'port': 5432,
            'database': 'protecai_db',
            'user': 'protecai',
            'password': 'protecai'
        }
        
        # Contadores
        self.files_found = 0
        self.files_converted = 0
        self.equipment_created = 0
        self.error_count = 0
        
        # Cache para evitar duplicatas
        self.manufacturer_cache = {}
        self.model_cache = {}
        self.equipment_tags = set()
        
    def connect_database(self):
        """Conectar ao PostgreSQL com tratamento robusto"""
        try:
            self.conn = psycopg2.connect(**self.db_config)
            self.conn.autocommit = True
            logger.info("‚úÖ Conex√£o PostgreSQL estabelecida com AUTOCOMMIT")
            return True
        except Exception as e:
            logger.error(f"‚ùå Erro conectando PostgreSQL: {e}")
            return False
    
    def clean_database_tables(self):
        """Limpar completamente as tabelas para remover duplicatas"""
        try:
            with self.conn.cursor() as cur:
                logger.info("üßπ LIMPANDO tabelas para eliminar duplicatas...")
                
                tables_to_clean = [
                    'protec_ai.relay_equipment',
                    'protec_ai.relay_models', 
                    'protec_ai.fabricantes'
                ]
                
                for table in tables_to_clean:
                    cur.execute(f"TRUNCATE TABLE {table} RESTART IDENTITY CASCADE")
                    logger.info(f"‚úÖ Tabela {table} limpa")
                
                logger.info("üßπ Limpeza completa realizada")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro limpando tabelas: {e}")
            return False
    
    def setup_base_data(self):
        """Configurar dados base (fabricantes, modelos, fun√ß√µes)"""
        try:
            with self.conn.cursor() as cur:
                logger.info("üèóÔ∏è Configurando dados base...")
                
                # Fabricantes reais
                fabricantes = [
                    ('SE', 'Schneider Electric', 'Fran√ßa'),
                    ('ABB', 'ABB Ltd', 'Su√≠√ßa'),
                    ('GE', 'General Electric', 'Estados Unidos'),
                    ('SIEMENS', 'Siemens AG', 'Alemanha')
                ]
                
                for codigo, nome, pais in fabricantes:
                    cur.execute("""
                        INSERT INTO protec_ai.fabricantes (codigo_fabricante, nome_completo, pais_origem) 
                        VALUES (%s, %s, %s) 
                        ON CONFLICT (codigo_fabricante) DO NOTHING
                        RETURNING id
                    """, (codigo, nome, pais))
                    
                    result = cur.fetchone()
                    if result:
                        self.manufacturer_cache[codigo] = result[0]
                        logger.info(f"‚úÖ Fabricante criado: {nome}")
                    else:
                        cur.execute("SELECT id FROM protec_ai.fabricantes WHERE codigo_fabricante = %s", (codigo,))
                        self.manufacturer_cache[codigo] = cur.fetchone()[0]
                
                # Modelos de rel√©s REAIS (expandidos para incluir SEPAM)
                modelos = [
                    ('P122', 'MiCOM P122 Overcurrent Protection', 'SE'),
                    ('P143', 'MiCOM P143 Feeder Protection', 'SE'),
                    ('P220', 'MiCOM P220 Generator Protection', 'SE'),
                    ('P241', 'MiCOM P241 Line Protection', 'SE'),
                    ('P922', 'MiCOM P922 Busbar Protection', 'SE'),
                    ('P922S', 'MiCOM P922S Busbar Protection', 'SE'),
                    ('REF615', 'ABB REF615 Feeder Protection', 'ABB'),
                    ('RET650', 'ABB RET650 Transformer Protection', 'ABB'),
                    ('SEPAM_S40', 'Schneider Electric SEPAM S40', 'SE'),
                    ('SEPAM_S80', 'Schneider Electric SEPAM S80', 'SE')
                ]
                
                for model_code, model_name, manufacturer_code in modelos:
                    manufacturer_id = self.manufacturer_cache[manufacturer_code]
                    
                    cur.execute("""
                        INSERT INTO protec_ai.relay_models 
                        (model_code, model_name, manufacturer_id, voltage_class, technology) 
                        VALUES (%s, %s, %s, %s, %s) 
                        ON CONFLICT (model_code) DO NOTHING
                        RETURNING id
                    """, (model_code, model_name, manufacturer_id, '13.8kV-138kV', 'Digital'))
                    
                    result = cur.fetchone()
                    if result:
                        self.model_cache[model_code] = result[0]
                        logger.info(f"‚úÖ Modelo criado: {model_name}")
                    else:
                        cur.execute("SELECT id FROM protec_ai.relay_models WHERE model_code = %s", (model_code,))
                        self.model_cache[model_code] = cur.fetchone()[0]
                
                logger.info("üèóÔ∏è Dados base configurados com sucesso")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro configurando dados base: {e}")
            return False
    
    def run_universal_converter(self):
        """
        Executa o conversor universal para processar TODOS os formatos
        Esta √© a CHAVE da arquitetura robusta
        """
        logger.info("üîÑ EXECUTANDO CONVERSOR UNIVERSAL para processar TODOS os formatos")
        
        try:
            # Executar o conversor universal
            result = subprocess.run([
                sys.executable, 
                str(self.src_dir / "universal_format_converter.py"),
                "--verbose"
            ], capture_output=True, text=True, cwd=str(self.base_dir))
            
            if result.returncode == 0:
                logger.info("‚úÖ Conversor universal executado com sucesso")
                logger.info(f"Output: {result.stdout}")
                return True
            else:
                logger.error(f"‚ùå Erro no conversor universal: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro executando conversor universal: {e}")
            return False
    
    def find_all_converted_csv_files(self):
        """Encontrar todos os CSVs convertidos pelo conversor universal"""
        csv_files = list(self.outputs_csv_dir.glob("*_params.csv"))
        csv_files.sort(key=lambda x: x.name)
        
        logger.info(f"üìÅ Encontrados {len(csv_files)} arquivos CSV convertidos")
        return csv_files
    
    def detect_model_from_csv_content(self, csv_path):
        """Detectar modelo do rel√© analisando o conte√∫do do CSV convertido"""
        try:
            import pandas as pd
            df = pd.read_csv(csv_path)
            
            # Verificar por c√≥digos ou descri√ß√µes espec√≠ficas
            for _, row in df.iterrows():
                code = str(row.get('Code', ''))
                description = str(row.get('Description', ''))
                value = str(row.get('Value', ''))
                
                # Padr√µes MiCOM
                if code.startswith('00.06') or 'micom' in description.lower():
                    if 'p122' in value.lower():
                        return 'P122'
                    elif 'p143' in value.lower():
                        return 'P143'
                    elif 'p220' in value.lower():
                        return 'P220'
                    elif 'p241' in value.lower():
                        return 'P241'
                    elif 'p922' in value.lower():
                        return 'P922'
                
                # Padr√µes SEPAM (detec√ß√£o por se√ß√£o ou conte√∫do)
                if 'sepam' in description.lower() or code.startswith('Sepam_'):
                    return 'SEPAM_S40'
                
                # Padr√µes ABB
                if 'ref615' in description.lower() or 'ref615' in value.lower():
                    return 'REF615'
                elif 'ret650' in description.lower() or 'ret650' in value.lower():
                    return 'RET650'
            
            # Fallback: tentar detectar pelo nome do arquivo
            filename = csv_path.stem.replace('_params', '')
            filename_upper = filename.upper()
            
            if 'P122' in filename_upper:
                return 'P122'
            elif 'P143' in filename_upper:
                return 'P143'
            elif 'SEPAM' in filename_upper or 'S40' in filename_upper:
                return 'SEPAM_S40'
            elif 'REF615' in filename_upper:
                return 'REF615'
            
            # Modelo padr√£o
            return 'P122'
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro detectando modelo para {csv_path.name}: {e}")
            return 'P122'  # Fallback
    
    def generate_unique_equipment_tag(self, filename, model):
        """Gerar tag √∫nico para equipamento usando hash"""
        base_tag = f"REL-{model}-{filename[:15]}"
        base_tag = re.sub(r'[^A-Z0-9\-]', '', base_tag.upper())
        
        if base_tag in self.equipment_tags:
            hash_suffix = hashlib.md5(filename.encode()).hexdigest()[:8]
            base_tag = f"{base_tag}-{hash_suffix}"
        
        if len(base_tag) > 50:
            base_tag = base_tag[:42] + hashlib.md5(filename.encode()).hexdigest()[:8]
        
        self.equipment_tags.add(base_tag)
        return base_tag
    
    def extract_equipment_info_from_csv(self, csv_path):
        """Extrair informa√ß√µes do equipamento do CSV convertido"""
        try:
            import pandas as pd
            df = pd.read_csv(csv_path)
            
            info = {
                'serial_number': None,
                'installation_date': None,
                'bay_name': 'Unknown',
                'voltage_level': '13.8kV',
                'description': f"Processado de {csv_path.name}"
            }
            
            # Procurar informa√ß√µes espec√≠ficas
            for _, row in df.iterrows():
                code = str(row.get('Code', ''))
                description = str(row.get('Description', ''))
                value = str(row.get('Value', ''))
                
                # Serial number
                if any(term in description.lower() for term in ['serial', 'n√∫mero', 'series']):
                    info['serial_number'] = value
                
                # Date patterns
                date_match = re.search(r'(\d{4}-\d{2}-\d{2})', value)
                if date_match:
                    info['installation_date'] = date_match.group(1)
                
                # Bay name patterns
                bay_match = re.search(r'(\d{2,3}-[A-Z]{2}-\d{2}[A-Z]?)', description + value)
                if bay_match:
                    info['bay_name'] = bay_match.group(1)
            
            # Extrair do nome do arquivo
            filename = csv_path.stem.replace('_params', '')
            
            # Tentar extrair bay do nome
            bay_match = re.search(r'(\d{2,3}-[A-Z]{2}-\d{2}[A-Z]?)', filename)
            if bay_match and info['bay_name'] == 'Unknown':
                info['bay_name'] = bay_match.group(1)
            
            # Serial baseado no nome se n√£o encontrado
            if not info['serial_number']:
                info['serial_number'] = f"SN-{filename[:15]}"
            
            return info
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro extraindo info de {csv_path.name}: {e}")
            return {
                'serial_number': f"SN-{csv_path.stem}",
                'installation_date': None,
                'bay_name': 'Unknown',
                'voltage_level': '13.8kV',
                'description': f"Processado de {csv_path.name}"
            }
    
    def process_single_csv_file(self, csv_path):
        """Processar um √∫nico arquivo CSV convertido"""
        try:
            filename = csv_path.stem.replace('_params', '')
            logger.info(f"üìÑ Processando: {filename}")
            
            # Detectar modelo
            model = self.detect_model_from_csv_content(csv_path)
            if model not in self.model_cache:
                logger.warning(f"‚ö†Ô∏è Modelo {model} n√£o encontrado no cache, usando P122")
                model = 'P122'
            
            # Gerar tag √∫nico
            equipment_tag = self.generate_unique_equipment_tag(filename, model)
            
            # Extrair informa√ß√µes do equipamento
            info = self.extract_equipment_info_from_csv(csv_path)
            
            # Inserir equipamento no banco
            with self.conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO protec_ai.relay_equipment 
                    (equipment_tag, relay_model_id, serial_number, installation_date, 
                     bay_name, voltage_level, position_description, status)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                    RETURNING id
                """, (
                    equipment_tag,
                    self.model_cache[model],
                    info['serial_number'],
                    info['installation_date'],
                    info['bay_name'],
                    info['voltage_level'],
                    info['description'],
                    "ACTIVE"
                ))
                
                equipment_id = cur.fetchone()[0]
                self.equipment_created += 1
                logger.info(f"‚úÖ Equipamento criado: {equipment_tag} (Modelo: {model})")
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro processando {csv_path.name}: {e}")
            self.error_count += 1
            return False
    
    def process_all_converted_files(self):
        """Processar todos os arquivos CSV convertidos"""
        csv_files = self.find_all_converted_csv_files()
        self.files_found = len(csv_files)
        
        for csv_path in csv_files:
            success = self.process_single_csv_file(csv_path)
            if success:
                self.files_converted += 1
        
        # Relat√≥rio final
        logger.info("üìä PROCESSAMENTO UNIVERSAL CONCLU√çDO:")
        logger.info(f"   üìÅ Arquivos CSV encontrados: {self.files_found}")
        logger.info(f"   ‚úÖ Arquivos processados: {self.files_converted}")
        logger.info(f"   ‚ùå Erros: {self.error_count}")
        logger.info(f"   üîß Equipamentos criados: {self.equipment_created}")
        
        # Verificar total no banco
        with self.conn.cursor() as cur:
            cur.execute("SELECT COUNT(*) FROM protec_ai.relay_equipment")
            total_db = cur.fetchone()[0]
            logger.info(f"   üóÑÔ∏è Equipamentos no banco: {total_db}")
        
        if self.error_count > 0:
            logger.warning(f"‚ö†Ô∏è Processamento conclu√≠do com {self.error_count} erros de {self.files_found} arquivos")
        else:
            logger.info(f"üéâ Processamento 100% bem sucedido! {self.files_found} arquivos processados")
        
        return total_db

def main():
    print("üöÄ PROCESSAMENTO UNIVERSAL ROBUSTO DOS 50 ARQUIVOS REAIS")
    print("üéØ ARQUITETURA UNIVERSAL - TRATA A CAUSA RAIZ")
    print("=" * 70)
    
    processor = UniversalRobustRelayProcessor()
    
    # 1. Conectar ao banco
    if not processor.connect_database():
        sys.exit(1)
    
    # 2. Limpar tabelas (eliminar duplicatas)
    if not processor.clean_database_tables():
        sys.exit(1)
    
    # 3. Configurar dados base
    if not processor.setup_base_data():
        sys.exit(1)
    
    # 4. EXECUTAR CONVERSOR UNIVERSAL (CHAVE DA SOLU√á√ÉO)
    if not processor.run_universal_converter():
        sys.exit(1)
    
    # 5. Processar todos os CSVs convertidos
    total_equipment = processor.process_all_converted_files()
    
    print("\nüéâ SOLU√á√ÉO UNIVERSAL CONCLU√çDA!")
    print(f"üìä Total de equipamentos processados: {total_equipment}")
    print("üéØ CAUSA RAIZ TRATADA: Arquitetura universal robusta implementada")

if __name__ == "__main__":
    main()