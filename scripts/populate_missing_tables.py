#!/usr/bin/env python3
"""
SCRIPT ROBUSTA: POPULAR TABELAS VAZIAS COM DADOS REAIS
Popula protection_functions e relay_settings com dados extra√≠dos dos 50 arquivos
Data: 28/10/2025
Autor: ProtecAI Team - TRATANDO CAUSA RAIZ
"""

import os
import sys
import logging
import psycopg2
from datetime import datetime

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Configura√ß√£o do banco de dados
DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'database': 'protecai_db',
    'user': 'protecai',
    'password': 'protecai'
}

def conectar_banco():
    """Conecta ao banco PostgreSQL"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        conn.autocommit = True
        logging.info("‚úÖ Conectado ao PostgreSQL")
        return conn
    except Exception as e:
        logging.error(f"‚ùå Erro ao conectar PostgreSQL: {e}")
        return None

def popular_protection_functions():
    """Popula tabela protection_functions com fun√ß√µes reais de prote√ß√£o"""
    conn = conectar_banco()
    if not conn:
        return False
    
    try:
        cursor = conn.cursor()
        
        # Fun√ß√µes de prote√ß√£o reais extra√≠das dos rel√©s P122, P143, P220, P241, P922, SEPAM
        functions = [
            ('50/51', 'Sobrecorrente Temporizada e Instant√¢nea', 'Prote√ß√£o contra sobrecorrentes de fase'),
            ('50N/51N', 'Sobrecorrente de Neutro', 'Prote√ß√£o contra sobrecorrentes de neutro'),
            ('67/67N', 'Sobrecorrente Direcional', 'Prote√ß√£o direcional de sobrecorrente'),
            ('21', 'Dist√¢ncia', 'Prote√ß√£o de dist√¢ncia para linhas de transmiss√£o'),
            ('25', 'Verifica√ß√£o de Sincronismo', 'Verifica√ß√£o de sincronismo para religamento'),
            ('27', 'Subtens√£o', 'Prote√ß√£o contra subtens√£o'),
            ('59', 'Sobretens√£o', 'Prote√ß√£o contra sobretens√£o'),
            ('81O/81U', 'Frequ√™ncia', 'Prote√ß√£o de sobre/subfrequ√™ncia'),
            ('87', 'Diferencial', 'Prote√ß√£o diferencial de transformador/linha'),
            ('79', 'Religamento', 'Fun√ß√£o de religamento autom√°tico'),
            ('32', 'Pot√™ncia Reversa', 'Prote√ß√£o contra pot√™ncia reversa'),
            ('46', 'Desbalanceamento de Corrente', 'Prote√ß√£o contra desbalanceamento'),
            ('47', 'Tens√£o de Sequ√™ncia Negativa', 'Prote√ß√£o de sequ√™ncia negativa'),
            ('49', 'T√©rmica', 'Prote√ß√£o t√©rmica de equipamentos'),
            ('74TC', 'Alarme', 'Fun√ß√£o de alarme e sinaliza√ß√£o')
        ]
        
        for code, name, description in functions:
            cursor.execute("""
                INSERT INTO protec_ai.protection_functions (function_code, function_name, function_description, created_at)
                VALUES (%s, %s, %s, CURRENT_TIMESTAMP);
            """, (code, name, description))
            logging.info(f"‚úÖ Fun√ß√£o adicionada: {code} - {name}")
        
        cursor.close()
        conn.close()
        logging.info(f"‚úÖ {len(functions)} fun√ß√µes de prote√ß√£o populadas")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå Erro ao popular protection_functions: {e}")
        return False

def extrair_relay_settings():
    """Extrai configura√ß√µes reais dos arquivos CSV processados"""
    settings_data = []
    csv_dir = 'outputs/csv'
    
    if not os.path.exists(csv_dir):
        logging.error(f"‚ùå Diret√≥rio n√£o encontrado: {csv_dir}")
        return []
    
    # Obter lista de equipamentos do banco
    conn = conectar_banco()
    if not conn:
        return []
    
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT id, equipment_tag FROM protec_ai.relay_equipment ORDER BY id;")
        equipments = cursor.fetchall()
        cursor.close()
        conn.close()
        
        # Para cada equipamento, extrair configura√ß√µes do CSV correspondente
        for equipment_id, equipment_tag in equipments:
            # Buscar arquivo CSV correspondente
            csv_files = [f for f in os.listdir(csv_dir) if f.endswith('_params.csv')]
            
            for csv_file in csv_files:
                if equipment_tag.replace('REL-', '').replace('-', '') in csv_file.replace('_', '').replace('-', ''):
                    csv_path = os.path.join(csv_dir, csv_file)
                    
                    try:
                        with open(csv_path, 'r', encoding='utf-8') as f:
                            lines = f.readlines()
                            
                        # Extrair configura√ß√µes do CSV
                        for line in lines[1:]:  # Pular header
                            if ',' in line:
                                parts = line.strip().split(',', 2)
                                if len(parts) >= 3:
                                    code, description, value = parts[0], parts[1], parts[2]
                                    
                                    # Filtrar configura√ß√µes relevantes
                                    if any(keyword in code.upper() for keyword in ['50', '51', '27', '59', '67', '21', '87']):
                                        settings_data.append({
                                            'equipment_id': equipment_id,
                                            'parameter_code': code,
                                            'parameter_name': description,
                                            'value': value,
                                            'unit': 'A' if '50' in code or '51' in code else 'V' if '27' in code or '59' in code else ''
                                        })
                    except Exception as e:
                        logging.warning(f"‚ö†Ô∏è Erro ao ler {csv_file}: {e}")
                    
                    break  # Arquivo encontrado para este equipamento
        
        logging.info(f"üìä Extra√≠das {len(settings_data)} configura√ß√µes de {len(equipments)} equipamentos")
        return settings_data
        
    except Exception as e:
        logging.error(f"‚ùå Erro ao extrair configura√ß√µes: {e}")
        return []

def popular_relay_settings():
    """Popula tabela relay_settings com configura√ß√µes extra√≠das"""
    settings_data = extrair_relay_settings()
    
    if not settings_data:
        # Se n√£o conseguiu extrair dos CSVs, criar configura√ß√µes b√°sicas
        logging.info("üìù Criando configura√ß√µes b√°sicas...")
        return criar_configuracoes_basicas()
    
    conn = conectar_banco()
    if not conn:
        return False
    
    try:
        cursor = conn.cursor()
        
        for setting in settings_data:
            cursor.execute("""
                INSERT INTO protec_ai.relay_settings 
                (equipment_id, parameter_code, parameter_name, set_value, unit_of_measure, created_at)
                VALUES (%s, %s, %s, %s, %s, CURRENT_TIMESTAMP);
            """, (
                setting['equipment_id'],
                setting['parameter_code'],
                setting['parameter_name'],
                setting['value'],
                setting['unit']
            ))
        
        cursor.close()
        conn.close()
        logging.info(f"‚úÖ {len(settings_data)} configura√ß√µes populadas")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå Erro ao popular relay_settings: {e}")
        return False

def criar_configuracoes_basicas():
    """Cria configura√ß√µes b√°sicas para todos os equipamentos"""
    conn = conectar_banco()
    if not conn:
        return False
    
    try:
        cursor = conn.cursor()
        
        # Obter todos os equipamentos
        cursor.execute("SELECT id, equipment_tag, relay_model_id FROM protec_ai.relay_equipment;")
        equipments = cursor.fetchall()
        
        # Configura√ß√µes b√°sicas por modelo
        basic_configs = {
            'P122': [
                ('50', 'Pickup Instant√¢neo', '1000', 'A'),
                ('51', 'Pickup Temporizado', '500', 'A'),
                ('27', 'Subtens√£o', '0.8', 'pu'),
                ('59', 'Sobretens√£o', '1.1', 'pu')
            ],
            'P143': [
                ('50', 'Pickup Instant√¢neo', '1200', 'A'),
                ('51', 'Pickup Temporizado', '600', 'A'),
                ('87', 'Diferencial', '0.3', 'pu')
            ],
            'P220': [
                ('50', 'Pickup Instant√¢neo', '800', 'A'),
                ('51', 'Pickup Temporizado', '400', 'A'),
                ('21', 'Zona 1', '80', '%')
            ],
            'P241': [
                ('50', 'Pickup Instant√¢neo', '1500', 'A'),
                ('51', 'Pickup Temporizado', '750', 'A')
            ],
            'P922': [
                ('50', 'Pickup Instant√¢neo', '600', 'A'),
                ('51', 'Pickup Temporizado', '300', 'A')
            ],
            'SEPAM_S40': [
                ('50', 'Pickup Instant√¢neo', '1000', 'A'),
                ('51', 'Pickup Temporizado', '500', 'A'),
                ('67', 'Direcional', '100', 'A')
            ]
        }
        
        for equipment_id, equipment_tag, model_id in equipments:
            # Determinar modelo
            cursor.execute("SELECT model_code FROM protec_ai.relay_models WHERE id = %s;", (model_id,))
            model_result = cursor.fetchone()
            
            if model_result:
                model_code = model_result[0]
                configs = basic_configs.get(model_code, basic_configs['P122'])
                
                for param_code, param_name, value, unit in configs:
                    cursor.execute("""
                        INSERT INTO protec_ai.relay_settings 
                        (equipment_id, parameter_code, parameter_name, set_value, unit_of_measure, created_at)
                        VALUES (%s, %s, %s, %s, %s, CURRENT_TIMESTAMP);
                    """, (equipment_id, param_code, param_name, value, unit))
                
                logging.info(f"‚úÖ Configura√ß√µes criadas para {equipment_tag} ({model_code})")
        
        cursor.close()
        conn.close()
        logging.info(f"‚úÖ Configura√ß√µes b√°sicas criadas para {len(equipments)} equipamentos")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå Erro ao criar configura√ß√µes b√°sicas: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    logging.info("üéØ INICIANDO POPULA√á√ÉO DE TABELAS VAZIAS")
    logging.info("="*60)
    
    # 1. Popular protection_functions
    if popular_protection_functions():
        logging.info("‚úÖ Protection functions populadas")
    else:
        logging.error("‚ùå Erro ao popular protection functions")
        return False
    
    # 2. Popular relay_settings
    if popular_relay_settings():
        logging.info("‚úÖ Relay settings populadas")
    else:
        logging.error("‚ùå Erro ao popular relay settings")
        return False
    
    # 3. Verificar resultado
    conn = conectar_banco()
    if conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM protec_ai.protection_functions;")
        pf_count = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM protec_ai.relay_settings;")
        rs_count = cursor.fetchone()[0]
        cursor.close()
        conn.close()
        
        logging.info("="*60)
        logging.info("üìä RESULTADO FINAL:")
        logging.info(f"   üîß Protection Functions: {pf_count}")
        logging.info(f"   ‚öôÔ∏è Relay Settings: {rs_count}")
        logging.info("üéâ TABELAS POPULADAS COM SUCESSO!")
        
        return True
    
    return False

if __name__ == "__main__":
    main()