"""
Router de Valida√ß√£o - Verifica√ß√£o de Conformidade
=================================================

Endpoints para valida√ß√£o de configura√ß√µes e seletividade.
"""

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
import logging

from api.core.database import get_db
from api.schemas import ValidationRequest, ValidationResponse, BaseResponse
from api.services.validation_service import ValidationService

router = APIRouter()
logger = logging.getLogger(__name__)

@router.post("/", response_model=ValidationResponse)
async def validate_configuration(
    validation_request: ValidationRequest,
    db: Session = Depends(get_db)
):
    """
    ‚úÖ **Validar Configura√ß√£o**
    
    Valida configura√ß√µes de equipamentos segundo normas e boas pr√°ticas.
    
    **Tipos de Valida√ß√£o:**
    - `full`: Valida√ß√£o completa (configura√ß√£o el√©trica + prote√ß√£o + I/O)
    - `electrical`: Apenas configura√ß√£o el√©trica
    - `protection`: Apenas fun√ß√µes de prote√ß√£o
    - `io`: Apenas configura√ß√µes I/O
    - `selectivity`: Valida√ß√£o de seletividade
    
    **Verifica√ß√µes Realizadas:**
    - Conformidade com normas t√©cnicas
    - Consist√™ncia de parametriza√ß√£o
    - Adequa√ß√£o de ajustes
    - Coordena√ß√£o entre fun√ß√µes
    """
    try:
        service = ValidationService(db)
        validation_result = await service.validate_equipments(
            equipment_ids=validation_request.equipment_ids,
            validation_type=validation_request.validation_type
        )
        
        return validation_result
    except Exception as e:
        logger.error(f"Error during validation: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error performing configuration validation"
        )

@router.get("/rules", response_model=dict)
async def get_validation_rules():
    """
    üìã **Regras de Valida√ß√£o**
    
    Retorna todas as regras de valida√ß√£o utilizadas pelo sistema.
    """
    try:
        service = ValidationService(None)  # N√£o precisa de DB para regras est√°ticas
        rules = await service.get_validation_rules()
        
        return {
            "success": True,
            "message": "Validation rules retrieved successfully",
            "rules": rules
        }
    except Exception as e:
        logger.error(f"Error retrieving validation rules: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error retrieving validation rules"
        )

@router.post("/custom", response_model=ValidationResponse)
async def custom_validation(
    equipment_ids: List[int],
    custom_rules: dict,
    db: Session = Depends(get_db)
):
    """
    üîß **Valida√ß√£o Customizada**
    
    Executa valida√ß√£o com regras personalizadas.
    """
    try:
        service = ValidationService(db)
        validation_result = await service.custom_validation(
            equipment_ids=equipment_ids,
            custom_rules=custom_rules
        )
        
        return validation_result
    except Exception as e:
        logger.error(f"Error during custom validation: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error performing custom validation"
        )