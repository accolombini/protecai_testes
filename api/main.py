"""
ProtecAI API - Sistema Integrado de Prote√ß√£o de Rel√©s
====================================================

API REST robusta para sistema revolucion√°rio de engenharia de prote√ß√£o.
Integra PostgreSQL, ETAP Simulador e ML Reinforcement Learning.

Autor: ProtecAI Team
Data: 19/10/2025
Vers√£o: 1.0.0
"""

from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
from datetime import datetime
import logging
from typing import Optional, List, Dict, Any
import os
import sys

# Adicionar path do projeto
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# Imports dos m√≥dulos do projeto
from api.routers import equipments, compare, imports, etap, etap_native, ml, validation, ml_gateway, reports
from api.core.config import settings
from api.core.database import engine, get_db

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("protecai_api")

# Criar inst√¢ncia FastAPI
app = FastAPI(
    title="ProtecAI API",
    description="""
    ## Sistema Integrado de Prote√ß√£o de Rel√©s üîß
    
    **ProtecAI** √© uma API REST robusta que revoluciona a engenharia de prote√ß√£o atrav√©s da integra√ß√£o de:
    
    - üìä **PostgreSQL**: Hist√≥rico e configura√ß√µes reais
    - üéØ **ETAP Simulador**: Valida√ß√£o de seletividade
    - ü§ñ **ML Reinforcement Learning**: Otimiza√ß√£o cont√≠nua
    - üåê **ML Gateway**: Interface enterprise para m√≥dulos externos de ML
    - üë∑ **Interface √önica**: Hub para engenheiros de prote√ß√£o
    
    ### Funcionalidades Principais:
    - **Equipments**: CRUD completo de equipamentos
    - **Compare**: Compara√ß√£o inteligente de configura√ß√µes
    - **Import**: Controle de importa√ß√£o de dados
    - **ETAP**: Interface com simulador (preparat√≥rio)
    - **ETAP Native**: etapPy‚Ñ¢ API com 95% precis√£o
    - **ML**: Otimiza√ß√£o via aprendizado por refor√ßo (preparat√≥rio)
    - **ML Gateway**: üÜï Gateway enterprise para m√≥dulos ML externos
    - **Validation**: Valida√ß√£o de seletividade
    
    ### Casos de Uso:
    - Redu√ß√£o de erro humano na configura√ß√£o manual
    - Garantia de seletividade do sistema de prote√ß√£o
    - Otimiza√ß√£o cont√≠nua de parametriza√ß√µes
    - **Integra√ß√£o com m√≥dulos ML/RL externos**
    - **Gest√£o de an√°lises ML coordena√ß√£o/seletividade/simula√ß√£o**
    - Compliance regulat√≥rio autom√°tico
    """,
    version="1.0.0",
    contact={
        "name": "ProtecAI Team",
        "email": "protecai@petrobras.com.br",
    },
    license_info={
        "name": "Proprietary",
        "url": "https://www.petrobras.com.br/licenses",
    },
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar origens espec√≠ficas
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Incluir routers
app.include_router(
    equipments.router,
    prefix="/api/v1/equipments",
    tags=["Equipments"],
    responses={404: {"description": "Equipment not found"}},
)

app.include_router(
    compare.router,
    prefix="/api/v1/compare",
    tags=["Compare"],
    responses={400: {"description": "Invalid comparison parameters"}},
)

app.include_router(
    imports.router,
    prefix="/api/v1/imports",
    tags=["Imports"],
    responses={422: {"description": "Import validation error"}},
)

app.include_router(
    etap.router,
    prefix="/api/v1/etap",
    tags=["ETAP Integration"],
    responses={503: {"description": "ETAP service unavailable"}},
)

app.include_router(
    etap_native.router,
    prefix="/api/v1/etap-native",
    tags=["ETAP Native"],
    responses={503: {"description": "ETAP Native service unavailable"}},
)

app.include_router(
    ml.router,
    prefix="/api/v1/ml",
    tags=["ML Optimization"],
    responses={501: {"description": "ML service not implemented"}},
)

app.include_router(
    validation.router,
    prefix="/api/v1/validation",
    tags=["Validation"],
    responses={400: {"description": "Validation error"}},
)

app.include_router(
    ml_gateway.router,
    prefix="/api/v1/ml-gateway",
    tags=["ML Gateway"],
    responses={500: {"description": "ML Gateway service error"}},
)

app.include_router(
    reports.router,
    prefix="/api/v1/reports",
    tags=["Reports"],
    responses={400: {"description": "Invalid report parameters"}},
)

# Event handlers
@app.on_event("startup")
async def startup_event():
    """Inicializa√ß√£o da API"""
    logger.info("üöÄ Iniciando ProtecAI API...")
    logger.info("üìä Conectando ao PostgreSQL...")
    logger.info("üéØ Preparando interface ETAP...")
    logger.info("ü§ñ Inicializando m√≥dulo ML...")
    logger.info("‚úÖ ProtecAI API inicializada com sucesso!")

@app.on_event("shutdown")
async def shutdown_event():
    """Finaliza√ß√£o da API"""
    logger.info("üîΩ Finalizando ProtecAI API...")
    logger.info("‚úÖ ProtecAI API finalizada com sucesso!")

# Endpoints base
@app.get("/", tags=["Root"])
async def root():
    """Endpoint raiz da API"""
    return {
        "message": "üîß ProtecAI API - Sistema Integrado de Prote√ß√£o de Rel√©s",
        "version": "1.0.0",
        "status": "operational",
        "timestamp": datetime.now().isoformat(),
        "docs": "/docs",
        "features": {
            "equipments": "‚úÖ CRUD completo",
            "compare": "‚úÖ Compara√ß√£o inteligente",
            "import": "‚úÖ Controle de dados",
            "etap": "‚úÖ Interface enterprise",
            "etap_native": "üöÄ etapPy‚Ñ¢ API Preparation",
            "ml": "üöß Interface preparat√≥ria",
            "ml_gateway": "üÜï Enterprise ML Gateway",
            "validation": "‚úÖ Valida√ß√£o de seletividade"
        }
    }

@app.get("/health", tags=["Health"])
async def health_check():
    """Health check da API"""
    try:
        # Verificar conex√£o com banco
        from api.core.database import engine
        from sqlalchemy import text
        with engine.connect() as connection:
            connection.execute(text("SELECT 1"))
        db_status = "‚úÖ Connected"
    except Exception as e:
        db_status = f"‚ùå Error: {str(e)}"
    
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "services": {
            "api": "‚úÖ Running",
            "database": db_status,
            "etap": "‚úÖ Enterprise Ready",
            "etap_native": "üöÄ etapPy‚Ñ¢ Prepared",
            "ml": "üöß Preparatory",
            "ml_gateway": "üÜï Enterprise Gateway Active"
        },
        "uptime": "Active since startup"
    }

@app.get("/health/connections", tags=["Health"])
async def health_connections():
    """
    üîß DIAGN√ìSTICO: Monitora pool de conex√µes PostgreSQL
    √ötil para detectar connection leaks durante desenvolvimento
    """
    try:
        from api.core.database import get_connection_stats, engine
        from sqlalchemy import text
        
        # Stats do pool SQLAlchemy
        pool_stats = get_connection_stats()
        
        # Stats do PostgreSQL
        with engine.connect() as conn:
            pg_stats = conn.execute(text("""
                SELECT 
                    count(*) as total_connections,
                    count(*) FILTER (WHERE state = 'active') as active,
                    count(*) FILTER (WHERE state = 'idle') as idle,
                    max_conn.setting::int as max_connections
                FROM pg_stat_activity,
                    (SELECT setting FROM pg_settings WHERE name = 'max_connections') as max_conn
                WHERE datname = 'protecai_db'
                GROUP BY max_conn.setting
            """)).fetchone()
        
        return {
            "timestamp": datetime.now().isoformat(),
            "sqlalchemy_pool": pool_stats,
            "postgresql": {
                "total_connections": pg_stats.total_connections if pg_stats else 0,
                "active": pg_stats.active if pg_stats else 0,
                "idle": pg_stats.idle if pg_stats else 0,
                "max_connections": pg_stats.max_connections if pg_stats else 100,
                "usage_percent": round((pg_stats.total_connections / pg_stats.max_connections * 100), 2) if pg_stats else 0
            },
            "status": "healthy" if (pg_stats and pg_stats.total_connections < pg_stats.max_connections * 0.8) else "warning"
        }
    except Exception as e:
        logger.error(f"Erro ao obter stats de conex√µes: {e}")
        return {
            "timestamp": datetime.now().isoformat(),
            "error": str(e),
            "status": "error"
        }

@app.get("/api/v1/info", tags=["Info"])
async def api_info():
    """Informa√ß√µes detalhadas da API"""
    return {
        "name": "ProtecAI API",
        "description": "Sistema Integrado de Prote√ß√£o de Rel√©s",
        "version": "1.0.0",
        "architecture": {
            "database": "PostgreSQL with relay_configs + ml_gateway schemas",
            "etap_integration": "Simulator interface + etapPy‚Ñ¢ API",
            "ml_module": "Reinforcement Learning (preparatory)",
            "ml_gateway": "Enterprise ML/RL Gateway for external teams",
            "endpoints": "50+",
            "models": "Equipment, Protection, ML Jobs, ML Results"
        },
        "capabilities": {
            "crud_operations": True,
            "intelligent_comparison": True,
            "data_import_control": True,
            "etap_simulation": "ready",
            "etap_native_api": "95% precision",
            "ml_optimization": "planned",
            "ml_gateway_integration": "enterprise ready",
            "external_ml_teams": "comprehensive support",
            "selectivity_validation": True
        },
        "contact": {
            "team": "ProtecAI Team",
            "project": "Petrobras Protection Engineering Revolution"
        }
    }

# Exception handlers
@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    """Handler para exce√ß√µes HTTP"""
    logger.error(f"HTTP Exception: {exc.status_code} - {exc.detail}")
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": True,
            "status_code": exc.status_code,
            "message": exc.detail,
            "timestamp": datetime.now().isoformat()
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    """Handler para exce√ß√µes gerais"""
    logger.error(f"General Exception: {str(exc)}")
    return JSONResponse(
        status_code=500,
        content={
            "error": True,
            "status_code": 500,
            "message": "Internal server error",
            "timestamp": datetime.now().isoformat()
        }
    )

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )