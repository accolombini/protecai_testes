"""
ProtecAI API - Sistema Integrado de Prote√ß√£o de Rel√©s
====================================================

API REST robusta para sistema revolucion√°rio de engenharia de prote√ß√£o.
Integra PostgreSQL, ETAP Simulador e ML Reinforcement Learning.

Autor: ProtecAI Team
Data: 19/10/2025
Vers√£o: 1.0.0
"""

from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
from datetime import datetime
import logging
from typing import Optional, List, Dict, Any
import os
import sys

# Adicionar path do projeto
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# Imports dos m√≥dulos do projeto
from api.routers import equipments, compare, imports, etap, ml, validation
from api.core.config import settings
from api.core.database import engine, get_db

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("protecai_api")

# Criar inst√¢ncia FastAPI
app = FastAPI(
    title="ProtecAI API",
    description="""
    ## Sistema Integrado de Prote√ß√£o de Rel√©s üîß
    
    **ProtecAI** √© uma API REST robusta que revoluciona a engenharia de prote√ß√£o atrav√©s da integra√ß√£o de:
    
    - üìä **PostgreSQL**: Hist√≥rico e configura√ß√µes reais
    - üéØ **ETAP Simulador**: Valida√ß√£o de seletividade
    - ü§ñ **ML Reinforcement Learning**: Otimiza√ß√£o cont√≠nua
    - üë∑ **Interface √önica**: Hub para engenheiros de prote√ß√£o
    
    ### Funcionalidades Principais:
    - **Equipments**: CRUD completo de equipamentos
    - **Compare**: Compara√ß√£o inteligente de configura√ß√µes
    - **Import**: Controle de importa√ß√£o de dados
    - **ETAP**: Interface com simulador (preparat√≥rio)
    - **ML**: Otimiza√ß√£o via aprendizado por refor√ßo (preparat√≥rio)
    - **Validation**: Valida√ß√£o de seletividade
    
    ### Casos de Uso:
    - Redu√ß√£o de erro humano na configura√ß√£o manual
    - Garantia de seletividade do sistema de prote√ß√£o
    - Otimiza√ß√£o cont√≠nua de parametriza√ß√µes
    - Compliance regulat√≥rio autom√°tico
    """,
    version="1.0.0",
    contact={
        "name": "ProtecAI Team",
        "email": "protecai@petrobras.com.br",
    },
    license_info={
        "name": "Proprietary",
        "url": "https://www.petrobras.com.br/licenses",
    },
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar origens espec√≠ficas
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Incluir routers
app.include_router(
    equipments.router,
    prefix="/api/v1/equipments",
    tags=["Equipments"],
    responses={404: {"description": "Equipment not found"}},
)

app.include_router(
    compare.router,
    prefix="/api/v1/compare",
    tags=["Compare"],
    responses={400: {"description": "Invalid comparison parameters"}},
)

app.include_router(
    imports.router,
    prefix="/api/v1/import",
    tags=["Import"],
    responses={422: {"description": "Import validation error"}},
)

app.include_router(
    etap.router,
    prefix="/api/v1/etap",
    tags=["ETAP Integration"],
    responses={503: {"description": "ETAP service unavailable"}},
)

app.include_router(
    ml.router,
    prefix="/api/v1/ml",
    tags=["ML Optimization"],
    responses={501: {"description": "ML service not implemented"}},
)

app.include_router(
    validation.router,
    prefix="/api/v1/validation",
    tags=["Validation"],
    responses={400: {"description": "Validation error"}},
)

# Event handlers
@app.on_event("startup")
async def startup_event():
    """Inicializa√ß√£o da API"""
    logger.info("üöÄ Iniciando ProtecAI API...")
    logger.info("üìä Conectando ao PostgreSQL...")
    logger.info("üéØ Preparando interface ETAP...")
    logger.info("ü§ñ Inicializando m√≥dulo ML...")
    logger.info("‚úÖ ProtecAI API inicializada com sucesso!")

@app.on_event("shutdown")
async def shutdown_event():
    """Finaliza√ß√£o da API"""
    logger.info("üîΩ Finalizando ProtecAI API...")
    logger.info("‚úÖ ProtecAI API finalizada com sucesso!")

# Endpoints base
@app.get("/", tags=["Root"])
async def root():
    """Endpoint raiz da API"""
    return {
        "message": "üîß ProtecAI API - Sistema Integrado de Prote√ß√£o de Rel√©s",
        "version": "1.0.0",
        "status": "operational",
        "timestamp": datetime.now().isoformat(),
        "docs": "/docs",
        "features": {
            "equipments": "‚úÖ CRUD completo",
            "compare": "‚úÖ Compara√ß√£o inteligente",
            "import": "‚úÖ Controle de dados",
            "etap": "üöß Interface preparat√≥ria",
            "ml": "üöß Interface preparat√≥ria",
            "validation": "‚úÖ Valida√ß√£o de seletividade"
        }
    }

@app.get("/health", tags=["Health"])
async def health_check():
    """Health check da API"""
    try:
        # Verificar conex√£o com banco
        from sqlalchemy import text
        db = next(get_db())
        db.execute(text("SELECT 1"))
        db_status = "‚úÖ Connected"
    except Exception as e:
        db_status = f"‚ùå Error: {str(e)}"
    
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "services": {
            "api": "‚úÖ Running",
            "database": db_status,
            "etap": "üöß Preparatory",
            "ml": "üöß Preparatory"
        },
        "uptime": "Active since startup"
    }

@app.get("/api/v1/info", tags=["Info"])
async def api_info():
    """Informa√ß√µes detalhadas da API"""
    return {
        "name": "ProtecAI API",
        "description": "Sistema Integrado de Prote√ß√£o de Rel√©s",
        "version": "1.0.0",
        "architecture": {
            "database": "PostgreSQL with relay_configs schema",
            "etap_integration": "Simulator interface (preparatory)",
            "ml_module": "Reinforcement Learning (preparatory)",
            "endpoints": 6,
            "models": "Equipment, Protection Functions, I/O Config"
        },
        "capabilities": {
            "crud_operations": True,
            "intelligent_comparison": True,
            "data_import_control": True,
            "etap_simulation": "planned",
            "ml_optimization": "planned",
            "selectivity_validation": True
        },
        "contact": {
            "team": "ProtecAI Team",
            "project": "Petrobras Protection Engineering Revolution"
        }
    }

# Exception handlers
@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    """Handler para exce√ß√µes HTTP"""
    logger.error(f"HTTP Exception: {exc.status_code} - {exc.detail}")
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": True,
            "status_code": exc.status_code,
            "message": exc.detail,
            "timestamp": datetime.now().isoformat()
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    """Handler para exce√ß√µes gerais"""
    logger.error(f"General Exception: {str(exc)}")
    return JSONResponse(
        status_code=500,
        content={
            "error": True,
            "status_code": 500,
            "message": "Internal server error",
            "timestamp": datetime.now().isoformat()
        }
    )

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )