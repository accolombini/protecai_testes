"""
Configura√ß√£o do banco de dados PostgreSQL
=========================================

Setup SQLAlchemy para integra√ß√£o com PostgreSQL.
"""

from sqlalchemy import create_engine, MetaData, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool
import logging

from api.core.config import settings

logger = logging.getLogger(__name__)

# Configurar engine do SQLAlchemy com pool robusto
engine = create_engine(
    settings.DATABASE_URL,
    connect_args={
        "options": "-c search_path=relay_configs,public"
    },
    echo=True if settings.LOG_LEVEL == "DEBUG" else False,
    # üîß CONFIGURA√á√ÉO ROBUSTA DO POOL DE CONEX√ïES
    pool_size=10,              # N√∫mero de conex√µes mantidas no pool
    max_overflow=20,           # Conex√µes extras permitidas al√©m do pool_size
    pool_timeout=30,           # Timeout para obter conex√£o do pool (segundos)
    pool_recycle=3600,         # Reciclar conex√µes a cada hora
    pool_pre_ping=True,        # Verificar conex√£o antes de usar (evita "connection closed")
)

# Session maker
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base para modelos
Base = declarative_base()

# Metadata para schema relay_configs
metadata = MetaData(schema="relay_configs")

def get_db():
    """Dependency para obter sess√£o do banco"""
    db = SessionLocal()
    try:
        yield db
    except Exception as e:
        logger.error(f"Database error: {e}")
        db.rollback()
        raise
    finally:
        db.close()

def test_connection():
    """Testa conex√£o com o banco"""
    try:
        with engine.connect() as connection:
            result = connection.execute(text("SELECT version();"))
            version = result.fetchone()[0]
            logger.info(f"‚úÖ PostgreSQL conectado: {version}")
            return True
    except Exception as e:
        logger.error(f"‚ùå Erro na conex√£o PostgreSQL: {e}")
        return False

def check_schema():
    """Verifica se o schema relay_configs existe"""
    try:
        with engine.connect() as connection:
            result = connection.execute(text("""
                SELECT schema_name 
                FROM information_schema.schemata 
                WHERE schema_name = 'relay_configs'
            """))
            schema_exists = result.fetchone() is not None
            
            if schema_exists:
                logger.info("‚úÖ Schema relay_configs encontrado")
                return True
            else:
                logger.warning("‚ö†Ô∏è Schema relay_configs n√£o encontrado")
                return False
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar schema: {e}")
        return False

def cleanup_connections():
    """
    üîß ROBUSTEZ: Limpa conex√µes idle e reseta pool
    Usar durante desenvolvimento para evitar "too many clients"
    """
    try:
        logger.info("üîÑ Limpando pool de conex√µes...")
        engine.dispose()
        logger.info("‚úÖ Pool de conex√µes resetado")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erro ao limpar conex√µes: {e}")
        return False

def get_connection_stats():
    """
    üìä Retorna estat√≠sticas do pool de conex√µes
    √ötil para debugging de connection leaks
    """
    try:
        pool = engine.pool
        return {
            "pool_size": pool.size(),
            "checked_in": pool.checkedin(),
            "checked_out": pool.checkedout(),
            "overflow": pool.overflow(),
            "total_connections": pool.size() + pool.overflow()
        }
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter stats: {e}")
        return None