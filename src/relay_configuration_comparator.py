#!/usr/bin/env python3
"""
üî¨ ProtecAI - Comparador de Configura√ß√µes de Rel√©s
Implementa√ß√£o do TODO #6: Sistema robusto para compara√ß√£o de configura√ß√µes entre rel√©s

Autor: ProtecAI Development Team
Data: 18/10/2025
Vers√£o: 1.0.0
"""

import psycopg2
import json
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
import pandas as pd
from decimal import Decimal


class ComparisonType(Enum):
    """Tipos de compara√ß√£o dispon√≠veis"""
    IDENTICAL = "identical"
    DIFFERENT = "different"
    MISSING_LEFT = "missing_left"
    MISSING_RIGHT = "missing_right"
    SIMILAR = "similar"
    WARNING = "warning"


@dataclass
class ComparisonResult:
    """Resultado de uma compara√ß√£o individual"""
    field_name: str
    comparison_type: ComparisonType
    left_value: Any
    right_value: Any
    difference: Optional[str] = None
    severity: str = "info"  # info, warning, critical
    notes: Optional[str] = None


@dataclass
class EquipmentSummary:
    """Resumo de um equipamento"""
    id: int
    tag_reference: Optional[str]
    serial_number: Optional[str]
    manufacturer: str
    model_type: str
    family: Optional[str]
    status: str
    software_version: Optional[str]


class RelayConfigurationComparator:
    """
    üî¨ Comparador de Configura√ß√µes de Rel√©s
    
    Sistema completo para compara√ß√£o de configura√ß√µes entre rel√©s,
    identifica√ß√£o de diferen√ßas e gera√ß√£o de relat√≥rios estruturados.
    """
    
    def __init__(self, db_config: Dict[str, str]):
        """
        Inicializa o comparador com configura√ß√£o do banco de dados
        
        Args:
            db_config: Dicion√°rio com configura√ß√µes de conex√£o
        """
        self.db_config = db_config
        self.conn = None
        self.comparison_results = {}
        
    def connect(self):
        """Estabelece conex√£o com o banco de dados"""
        try:
            self.conn = psycopg2.connect(**self.db_config)
            return True
        except Exception as e:
            print(f"‚ùå Erro na conex√£o: {e}")
            return False
    
    def disconnect(self):
        """Fecha conex√£o com o banco"""
        if self.conn:
            self.conn.close()
    
    def get_equipment_summary(self, equipment_id: int) -> Optional[EquipmentSummary]:
        """
        Obt√©m resumo de um equipamento
        
        Args:
            equipment_id: ID do equipamento
            
        Returns:
            EquipmentSummary ou None se n√£o encontrado
        """
        cursor = self.conn.cursor()
        try:
            cursor.execute("""
                SELECT 
                    re.id,
                    re.tag_reference, 
                    re.serial_number, 
                    m.name as manufacturer, 
                    rm.model_type,
                    rm.family,
                    re.status,
                    re.software_version
                FROM relay_configs.relay_equipment re
                LEFT JOIN relay_configs.relay_models rm ON re.model_id = rm.id
                LEFT JOIN relay_configs.manufacturers m ON rm.manufacturer_id = m.id
                WHERE re.id = %s;
            """, (equipment_id,))
            
            result = cursor.fetchone()
            if result:
                return EquipmentSummary(*result)
            return None
            
        except Exception as e:
            print(f"‚ùå Erro ao buscar equipamento {equipment_id}: {e}")
            return None
        finally:
            cursor.close()
    
    def get_electrical_configuration(self, equipment_id: int) -> Dict[str, Any]:
        """
        Obt√©m configura√ß√£o el√©trica de um equipamento
        
        Args:
            equipment_id: ID do equipamento
            
        Returns:
            Dicion√°rio com configura√ß√µes el√©tricas
        """
        cursor = self.conn.cursor()
        try:
            cursor.execute("""
                SELECT 
                    phase_ct_primary,
                    phase_ct_secondary,
                    neutral_ct_primary,
                    neutral_ct_secondary,
                    vt_primary,
                    vt_secondary,
                    nvd_vt_primary,
                    nvd_vt_secondary,
                    nominal_voltage,
                    equipment_load,
                    vt_connection_mode,
                    power_supply
                FROM relay_configs.electrical_configuration
                WHERE equipment_id = %s;
            """, (equipment_id,))
            
            result = cursor.fetchone()
            if result:
                columns = [
                    'phase_ct_primary', 'phase_ct_secondary',
                    'neutral_ct_primary', 'neutral_ct_secondary',
                    'vt_primary', 'vt_secondary',
                    'nvd_vt_primary', 'nvd_vt_secondary',
                    'nominal_voltage', 'equipment_load',
                    'vt_connection_mode', 'power_supply'
                ]
                return dict(zip(columns, result))
            return {}
            
        except Exception as e:
            print(f"‚ùå Erro ao buscar configura√ß√£o el√©trica {equipment_id}: {e}")
            return {}
        finally:
            cursor.close()
    
    def get_protection_functions(self, equipment_id: int) -> List[Dict[str, Any]]:
        """
        Obt√©m fun√ß√µes de prote√ß√£o de um equipamento
        
        Args:
            equipment_id: ID do equipamento
            
        Returns:
            Lista de fun√ß√µes de prote√ß√£o
        """
        cursor = self.conn.cursor()
        try:
            cursor.execute("""
                SELECT 
                    ansi_code,
                    function_name,
                    enabled,
                    current_setting,
                    time_setting,
                    characteristic,
                    direction,
                    pickup_value,
                    time_delay,
                    coordination_group,
                    priority,
                    additional_settings_json
                FROM relay_configs.protection_functions
                WHERE equipment_id = %s
                ORDER BY ansi_code;
            """, (equipment_id,))
            
            results = cursor.fetchall()
            columns = [
                'ansi_code', 'function_name', 'enabled',
                'current_setting', 'time_setting', 'characteristic',
                'direction', 'pickup_value', 'time_delay',
                'coordination_group', 'priority', 'additional_settings_json'
            ]
            
            functions = []
            for result in results:
                func_dict = dict(zip(columns, result))
                functions.append(func_dict)
            
            return functions
            
        except Exception as e:
            print(f"‚ùå Erro ao buscar fun√ß√µes de prote√ß√£o {equipment_id}: {e}")
            return []
        finally:
            cursor.close()
    
    def get_io_configuration(self, equipment_id: int) -> List[Dict[str, Any]]:
        """
        Obt√©m configura√ß√µes I/O de um equipamento
        
        Args:
            equipment_id: ID do equipamento
            
        Returns:
            Lista de configura√ß√µes I/O
        """
        cursor = self.conn.cursor()
        try:
            cursor.execute("""
                SELECT 
                    io_type,
                    channel_number,
                    label,
                    signal_type,
                    function_assignment,
                    alarm_settings,
                    status
                FROM relay_configs.io_configuration
                WHERE equipment_id = %s
                ORDER BY channel_number;
            """, (equipment_id,))
            
            results = cursor.fetchall()
            columns = [
                'io_type', 'channel_number', 'label',
                'signal_type', 'function_assignment',
                'alarm_settings', 'status'
            ]
            
            ios = []
            for result in results:
                io_dict = dict(zip(columns, result))
                ios.append(io_dict)
            
            return ios
            
        except Exception as e:
            print(f"‚ùå Erro ao buscar configura√ß√µes I/O {equipment_id}: {e}")
            return []
        finally:
            cursor.close()
    
    def compare_electrical_configurations(self, left_config: Dict, right_config: Dict) -> List[ComparisonResult]:
        """
        Compara configura√ß√µes el√©tricas entre dois equipamentos
        
        Args:
            left_config: Configura√ß√£o do primeiro equipamento
            right_config: Configura√ß√£o do segundo equipamento
            
        Returns:
            Lista de resultados de compara√ß√£o
        """
        results = []
        
        # Campos cr√≠ticos para compara√ß√£o
        critical_fields = [
            'phase_ct_primary', 'phase_ct_secondary',
            'neutral_ct_primary', 'neutral_ct_secondary',
            'vt_primary', 'vt_secondary',
            'nominal_voltage'
        ]
        
        # Campos informativos
        info_fields = [
            'nvd_vt_primary', 'nvd_vt_secondary',
            'equipment_load', 'vt_connection_mode', 'power_supply'
        ]
        
        all_fields = critical_fields + info_fields
        
        for field in all_fields:
            left_val = left_config.get(field)
            right_val = right_config.get(field)
            
            # Determinar severidade
            severity = "critical" if field in critical_fields else "info"
            
            if left_val is None and right_val is None:
                comp_type = ComparisonType.IDENTICAL
                notes = "Ambos valores n√£o configurados"
            elif left_val is None:
                comp_type = ComparisonType.MISSING_LEFT
                notes = "Valor n√£o configurado no equipamento esquerdo"
            elif right_val is None:
                comp_type = ComparisonType.MISSING_RIGHT
                notes = "Valor n√£o configurado no equipamento direito"
            elif left_val == right_val:
                comp_type = ComparisonType.IDENTICAL
                notes = "Valores id√™nticos"
            else:
                comp_type = ComparisonType.DIFFERENT
                
                # Calcular diferen√ßa percentual para valores num√©ricos
                if isinstance(left_val, (int, float, Decimal)) and isinstance(right_val, (int, float, Decimal)):
                    if left_val != 0:
                        diff_percent = abs((float(right_val) - float(left_val)) / float(left_val)) * 100
                        notes = f"Diferen√ßa: {diff_percent:.2f}%"
                    else:
                        notes = f"Valores diferentes: {left_val} vs {right_val}"
                else:
                    notes = f"Valores diferentes: {left_val} vs {right_val}"
            
            results.append(ComparisonResult(
                field_name=field,
                comparison_type=comp_type,
                left_value=left_val,
                right_value=right_val,
                difference=notes,
                severity=severity,
                notes=notes
            ))
        
        return results
    
    def compare_protection_functions(self, left_functions: List[Dict], right_functions: List[Dict]) -> List[ComparisonResult]:
        """
        Compara fun√ß√µes de prote√ß√£o entre dois equipamentos
        
        Args:
            left_functions: Fun√ß√µes do primeiro equipamento
            right_functions: Fun√ß√µes do segundo equipamento
            
        Returns:
            Lista de resultados de compara√ß√£o
        """
        results = []
        
        # Indexar fun√ß√µes por c√≥digo ANSI
        left_by_ansi = {f['ansi_code']: f for f in left_functions}
        right_by_ansi = {f['ansi_code']: f for f in right_functions}
        
        # Obter todos os c√≥digos ANSI √∫nicos
        all_ansi_codes = set(left_by_ansi.keys()) | set(right_by_ansi.keys())
        
        for ansi_code in sorted(all_ansi_codes):
            left_func = left_by_ansi.get(ansi_code)
            right_func = right_by_ansi.get(ansi_code)
            
            prefix = f"protection_function_{ansi_code}"
            
            if left_func is None:
                results.append(ComparisonResult(
                    field_name=f"{prefix}_existence",
                    comparison_type=ComparisonType.MISSING_LEFT,
                    left_value=None,
                    right_value=right_func['function_name'],
                    severity="warning",
                    notes=f"Fun√ß√£o {ansi_code} ausente no equipamento esquerdo"
                ))
                continue
            
            if right_func is None:
                results.append(ComparisonResult(
                    field_name=f"{prefix}_existence",
                    comparison_type=ComparisonType.MISSING_RIGHT,
                    left_value=left_func['function_name'],
                    right_value=None,
                    severity="warning",
                    notes=f"Fun√ß√£o {ansi_code} ausente no equipamento direito"
                ))
                continue
            
            # Comparar campos importantes
            comparison_fields = [
                ('enabled', 'critical'),
                ('current_setting', 'critical'),
                ('time_setting', 'critical'),
                ('pickup_value', 'warning'),
                ('time_delay', 'warning'),
                ('characteristic', 'info'),
                ('direction', 'info')
            ]
            
            for field, severity in comparison_fields:
                left_val = left_func.get(field)
                right_val = right_func.get(field)
                
                if left_val == right_val:
                    comp_type = ComparisonType.IDENTICAL
                    notes = "Valores id√™nticos"
                else:
                    comp_type = ComparisonType.DIFFERENT
                    if field == 'enabled':
                        notes = f"Habilita√ß√£o diferente: {'ON' if left_val else 'OFF'} vs {'ON' if right_val else 'OFF'}"
                    else:
                        notes = f"Valores diferentes: {left_val} vs {right_val}"
                
                results.append(ComparisonResult(
                    field_name=f"{prefix}_{field}",
                    comparison_type=comp_type,
                    left_value=left_val,
                    right_value=right_val,
                    severity=severity,
                    notes=notes
                ))
        
        return results
    
    def compare_io_configurations(self, left_ios: List[Dict], right_ios: List[Dict]) -> List[ComparisonResult]:
        """
        Compara configura√ß√µes I/O entre dois equipamentos
        
        Args:
            left_ios: I/Os do primeiro equipamento
            right_ios: I/Os do segundo equipamento
            
        Returns:
            Lista de resultados de compara√ß√£o
        """
        results = []
        
        # Estat√≠sticas gerais
        left_counts = {}
        right_counts = {}
        
        for io in left_ios:
            io_type = io['io_type']
            left_counts[io_type] = left_counts.get(io_type, 0) + 1
        
        for io in right_ios:
            io_type = io['io_type']
            right_counts[io_type] = right_counts.get(io_type, 0) + 1
        
        # Comparar contadores por tipo
        all_io_types = set(left_counts.keys()) | set(right_counts.keys())
        
        for io_type in sorted(all_io_types):
            left_count = left_counts.get(io_type, 0)
            right_count = right_counts.get(io_type, 0)
            
            if left_count == right_count:
                comp_type = ComparisonType.IDENTICAL
                notes = f"Mesmo n√∫mero de canais: {left_count}"
            else:
                comp_type = ComparisonType.DIFFERENT
                notes = f"Contagem diferente: {left_count} vs {right_count}"
            
            results.append(ComparisonResult(
                field_name=f"io_count_{io_type}",
                comparison_type=comp_type,
                left_value=left_count,
                right_value=right_count,
                severity="info",
                notes=notes
            ))
        
        return results
    
    def compare_equipments(self, equipment_id_1: int, equipment_id_2: int) -> Dict[str, Any]:
        """
        Compara dois equipamentos completamente
        
        Args:
            equipment_id_1: ID do primeiro equipamento
            equipment_id_2: ID do segundo equipamento
            
        Returns:
            Dicion√°rio com resultados completos da compara√ß√£o
        """
        if not self.conn:
            raise Exception("Conex√£o com banco n√£o estabelecida")
        
        # Obter resumos dos equipamentos
        eq1_summary = self.get_equipment_summary(equipment_id_1)
        eq2_summary = self.get_equipment_summary(equipment_id_2)
        
        if not eq1_summary or not eq2_summary:
            raise Exception("Um ou ambos equipamentos n√£o encontrados")
        
        comparison_report = {
            'comparison_metadata': {
                'timestamp': datetime.now().isoformat(),
                'equipment_1': eq1_summary.__dict__,
                'equipment_2': eq2_summary.__dict__
            },
            'electrical_comparison': [],
            'protection_comparison': [],
            'io_comparison': [],
            'summary': {
                'total_comparisons': 0,
                'identical': 0,
                'different': 0,
                'missing': 0,
                'critical_differences': 0,
                'warnings': 0
            }
        }
        
        # 1. Comparar configura√ß√µes el√©tricas
        eq1_electrical = self.get_electrical_configuration(equipment_id_1)
        eq2_electrical = self.get_electrical_configuration(equipment_id_2)
        electrical_results = self.compare_electrical_configurations(eq1_electrical, eq2_electrical)
        comparison_report['electrical_comparison'] = [r.__dict__ for r in electrical_results]
        
        # 2. Comparar fun√ß√µes de prote√ß√£o
        eq1_protection = self.get_protection_functions(equipment_id_1)
        eq2_protection = self.get_protection_functions(equipment_id_2)
        protection_results = self.compare_protection_functions(eq1_protection, eq2_protection)
        comparison_report['protection_comparison'] = [r.__dict__ for r in protection_results]
        
        # 3. Comparar configura√ß√µes I/O
        eq1_io = self.get_io_configuration(equipment_id_1)
        eq2_io = self.get_io_configuration(equipment_id_2)
        io_results = self.compare_io_configurations(eq1_io, eq2_io)
        comparison_report['io_comparison'] = [r.__dict__ for r in io_results]
        
        # 4. Calcular estat√≠sticas resumidas
        all_results = electrical_results + protection_results + io_results
        
        summary = comparison_report['summary']
        summary['total_comparisons'] = len(all_results)
        
        for result in all_results:
            if result.comparison_type == ComparisonType.IDENTICAL:
                summary['identical'] += 1
            elif result.comparison_type == ComparisonType.DIFFERENT:
                summary['different'] += 1
            elif result.comparison_type in [ComparisonType.MISSING_LEFT, ComparisonType.MISSING_RIGHT]:
                summary['missing'] += 1
            
            if result.severity == 'critical':
                summary['critical_differences'] += 1
            elif result.severity == 'warning':
                summary['warnings'] += 1
        
        return comparison_report
    
    def generate_comparison_report(self, comparison_data: Dict[str, Any], format_type: str = "console") -> str:
        """
        Gera relat√≥rio formatado da compara√ß√£o
        
        Args:
            comparison_data: Dados da compara√ß√£o
            format_type: Tipo do formato (console, json, html)
            
        Returns:
            Relat√≥rio formatado
        """
        if format_type == "console":
            return self._generate_console_report(comparison_data)
        elif format_type == "json":
            return json.dumps(comparison_data, indent=2, default=str)
        else:
            raise ValueError(f"Formato n√£o suportado: {format_type}")
    
    def _generate_console_report(self, comparison_data: Dict[str, Any]) -> str:
        """Gera relat√≥rio formatado para console"""
        report = []
        
        # Cabe√ßalho
        report.append("üî¨ RELAT√ìRIO DE COMPARA√á√ÉO DE CONFIGURA√á√ïES")
        report.append("=" * 60)
        
        # Metadados
        metadata = comparison_data['comparison_metadata']
        eq1 = metadata['equipment_1']
        eq2 = metadata['equipment_2']
        
        report.append(f"\nüìä EQUIPAMENTOS COMPARADOS:")
        report.append(f"  üîπ Equipamento 1: {eq1['manufacturer']} {eq1['model_type']}")
        report.append(f"     Tag: {eq1['tag_reference'] or 'N/A'} | Serial: {eq1['serial_number'] or 'N/A'}")
        report.append(f"     Software: {eq1['software_version'] or 'N/A'}")
        
        report.append(f"  üîπ Equipamento 2: {eq2['manufacturer']} {eq2['model_type']}")
        report.append(f"     Tag: {eq2['tag_reference'] or 'N/A'} | Serial: {eq2['serial_number'] or 'N/A'}")
        report.append(f"     Software: {eq2['software_version'] or 'N/A'}")
        
        # Resumo
        summary = comparison_data['summary']
        report.append(f"\nüìà RESUMO DA COMPARA√á√ÉO:")
        report.append(f"  ‚Ä¢ Total de compara√ß√µes: {summary['total_comparisons']}")
        report.append(f"  ‚Ä¢ Id√™nticos: {summary['identical']} ‚úÖ")
        report.append(f"  ‚Ä¢ Diferentes: {summary['different']} ‚ö†Ô∏è")
        report.append(f"  ‚Ä¢ Ausentes: {summary['missing']} ‚ùå")
        report.append(f"  ‚Ä¢ Diferen√ßas cr√≠ticas: {summary['critical_differences']} üö®")
        report.append(f"  ‚Ä¢ Avisos: {summary['warnings']} ‚ö†Ô∏è")
        
        # Configura√ß√µes el√©tricas
        if comparison_data['electrical_comparison']:
            report.append(f"\n‚ö° CONFIGURA√á√ïES EL√âTRICAS:")
            for comp in comparison_data['electrical_comparison']:
                if comp['comparison_type'] != 'identical':
                    icon = "üö®" if comp['severity'] == 'critical' else "‚ö†Ô∏è" if comp['severity'] == 'warning' else "‚ÑπÔ∏è"
                    report.append(f"  {icon} {comp['field_name']}: {comp['notes']}")
        
        # Fun√ß√µes de prote√ß√£o
        if comparison_data['protection_comparison']:
            report.append(f"\nüõ°Ô∏è FUN√á√ïES DE PROTE√á√ÉO:")
            for comp in comparison_data['protection_comparison']:
                if comp['comparison_type'] != 'identical':
                    icon = "üö®" if comp['severity'] == 'critical' else "‚ö†Ô∏è" if comp['severity'] == 'warning' else "‚ÑπÔ∏è"
                    report.append(f"  {icon} {comp['field_name']}: {comp['notes']}")
        
        # I/O
        if comparison_data['io_comparison']:
            report.append(f"\nüîå CONFIGURA√á√ïES I/O:")
            for comp in comparison_data['io_comparison']:
                if comp['comparison_type'] != 'identical':
                    icon = "‚ÑπÔ∏è"
                    report.append(f"  {icon} {comp['field_name']}: {comp['notes']}")
        
        report.append(f"\n‚è∞ Gerado em: {metadata['timestamp']}")
        report.append("=" * 60)
        
        return "\n".join(report)


def main():
    """Fun√ß√£o principal para demonstra√ß√£o"""
    # Configura√ß√£o do banco
    db_config = {
        'host': 'localhost',
        'port': 5432,
        'user': 'protecai',
        'password': 'protecai',
        'database': 'protecai_db'
    }
    
    # Criar inst√¢ncia do comparador
    comparator = RelayConfigurationComparator(db_config)
    
    try:
        # Conectar ao banco
        if not comparator.connect():
            print("‚ùå Falha na conex√£o com o banco")
            return
        
        print("üî¨ DEMONSTRA√á√ÉO DO COMPARADOR - TODO #6")
        print("=" * 50)
        
        # Comparar os dois equipamentos dispon√≠veis (IDs 3 e 4)
        comparison_result = comparator.compare_equipments(3, 4)
        
        # Gerar relat√≥rio
        report = comparator.generate_comparison_report(comparison_result, "console")
        print(report)
        
        # Salvar relat√≥rio JSON
        with open('outputs/logs/comparison_report.json', 'w', encoding='utf-8') as f:
            json.dump(comparison_result, f, indent=2, default=str, ensure_ascii=False)
        
        print(f"\nüíæ Relat√≥rio JSON salvo em: outputs/logs/comparison_report.json")
        
    except Exception as e:
        print(f"‚ùå Erro durante compara√ß√£o: {e}")
    finally:
        comparator.disconnect()


if __name__ == "__main__":
    main()